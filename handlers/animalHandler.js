module.exports = (bot) => {
  const Player = require('../models/Player');

  const animalTypes = {
    chicken: {
      name: 'üêî G√†',
      price: 500,
      growthTime: 3600000, // 1 gi·ªù
      images: {
        0: 'https://img.upanh.tv/2025/01/15/ga1.png',
        20: 'https://img.upanh.tv/2025/01/15/ga2.png',
        40: 'https://img.upanh.tv/2025/01/15/ga3.png',
        60: 'https://img.upanh.tv/2025/01/15/ga4.png',
        80: 'https://img.upanh.tv/2025/01/15/ga5.png',
        100: 'https://img.upanh.tv/2025/01/15/ga6.png',
      },
    },
    cow: {
      name: 'üêÑ B√≤',
      price: 1500,
      growthTime: 10800000, // 3 gi·ªù
      images: {
        0: 'https://img.upanh.tv/2025/01/15/cow1.png',
        20: 'https://img.upanh.tv/2025/01/15/cow2.png',
        40: 'https://img.upanh.tv/2025/01/15/cow3.png',
        60: 'https://img.upanh.tv/2025/01/15/cow4.png',
        80: 'https://img.upanh.tv/2025/01/15/cow5.png',
        100: 'https://img.upanh.tv/2025/01/15/cow6.png',
      },
    },
  };
  
  const createProgressBar = (progress, health) => {
    const filled = '‚ñà';
    const empty = '‚ñí';
    const barLength = 10;
    const progressFilled = Math.floor((progress / 100) * barLength);
    const healthFilled = Math.floor((health / 100) * barLength);

    return {
      growth: `${filled.repeat(progressFilled)}${empty.repeat(barLength - progressFilled)}`,
      health: `${filled.repeat(healthFilled)}${empty.repeat(barLength - healthFilled)}`,
    };
  };

  const formatTime = (milliseconds) => {
    const totalMinutes = Math.floor(milliseconds / 60000);
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    return `${hours} gi·ªù ${minutes} ph√∫t`;
  };

  bot.onText(/ChƒÉm s√≥c v·∫≠t nu√¥i/, async (msg) => {
    const userId = msg.from.id;
    const player = await Player.findOne({ userId });

    if (!player || player.animals.length === 0) {
      return bot.sendMessage(userId, '‚ùå B·∫°n ch∆∞a s·ªü h·ªØu v·∫≠t nu√¥i n√†o! H√£y mua t·∫°i c·ª≠a h√†ng.');
    }

    for (const [index, animal] of player.animals.entries()) {
      const animalData = animalTypes[animal.type];
      if (!animalData) {
        continue; // B·ªè qua n·∫øu lo·∫°i v·∫≠t nu√¥i kh√¥ng t·ªìn t·∫°i
      }

      const growthPercentage = Math.min(100, animal.growthProgress);
      const timeRemaining = Math.max(0, animalData.growthTime - (growthPercentage / 100) * animalData.growthTime);
      const imageUrl = Object.entries(animalData.images).reduce((url, [threshold, img]) => {
        return growthPercentage >= parseInt(threshold) ? img : url;
      }, animalData.images[0]);

      const progressBar = createProgressBar(animal.growthProgress, animal.health);

      let hungerStatus = animal.lastFed && Date.now() - new Date(animal.lastFed) > 7200000 ? 'ƒê√≥i' : 'No';
      let thirstStatus = animal.lastWatered && Date.now() - new Date(animal.lastWatered) > 7200000 ? 'Kh√°t' : 'Kh√¥ng kh√°t';
      let sickStatus = animal.isSick ? 'B·ªã b·ªánh' : 'Kh·ªèe m·∫°nh';

      const actions = [
        [{ text: 'üçé Cho ƒÉn', callback_data: `feed_animal:${index}` }],
        [{ text: 'üíß Cho u·ªëng n∆∞·ªõc', callback_data: `water_animal:${index}` }],
        [{ text: 'ü©∫ Ch·ªØa b·ªánh', callback_data: `heal_animal:${index}` }],
      ];
      if (growthPercentage >= 100) {
        actions.push([{ text: 'üí∞ B√°n', callback_data: `sell_animal:${index}` }]);
      }

      await bot.sendPhoto(userId, imageUrl, {
        caption: `üêæ ${animalData.name}:
  üå± Ti·∫øn tr√¨nh ph√°t tri·ªÉn: ${progressBar.growth} ${animal.growthProgress.toFixed(1)}%
  ‚è≥ Th·ªùi gian c√≤n l·∫°i: ${formatTime(timeRemaining)}
  ‚ù§Ô∏è S·ª©c kh·ªèe: ${progressBar.health} ${animal.health.toFixed(1)}%
  üçé T√¨nh tr·∫°ng: ${hungerStatus}
  üíß N∆∞·ªõc: ${thirstStatus}
  ü©∫ T√¨nh tr·∫°ng: ${sickStatus}`,
        reply_markup: { inline_keyboard: actions },
      });
    }
  });

  bot.on('callback_query', async (query) => {
    const [action, index] = query.data.split(':');
    const userId = query.from.id;

    if (!action.startsWith('feed_animal') &&
        !action.startsWith('water_animal') &&
        !action.startsWith('heal_animal') &&
        !action.startsWith('sell_animal')) {
      // B·ªè qua n·∫øu kh√¥ng ph·∫£i h√†nh ƒë·ªông li√™n quan ƒë·∫øn v·∫≠t nu√¥i
      return;
    }

    const player = await Player.findOne({ userId });

    if (!player || !player.animals[index]) {
      return bot.answerCallbackQuery(query.id, '‚ùå V·∫≠t nu√¥i kh√¥ng t·ªìn t·∫°i!');
    }

    const animal = player.animals[index];
    const animalData = animalTypes[animal.type];
    if (!animalData) {
      return bot.answerCallbackQuery(query.id, '‚ùå Lo·∫°i v·∫≠t nu√¥i kh√¥ng h·ª£p l·ªá!');
    }

    let message = '';

    switch (action) {
      case 'feed_animal':
        animal.lastFed = new Date();
        animal.health = Math.min(100, animal.health + 20);
        message = '‚úÖ ƒê√£ cho v·∫≠t nu√¥i ƒÉn!';
        break;
      case 'water_animal':
        animal.lastWatered = new Date();
        animal.health = Math.min(100, animal.health + 15);
        message = '‚úÖ ƒê√£ cho v·∫≠t nu√¥i u·ªëng n∆∞·ªõc!';
        break;
      case 'heal_animal':
        if (animal.isSick) {
          animal.isSick = false;
          animal.health = Math.min(100, animal.health + 30);
          message = '‚úÖ V·∫≠t nu√¥i ƒë√£ ƒë∆∞·ª£c ch·ªØa b·ªánh!';
        } else {
          message = '‚ùå V·∫≠t nu√¥i kh√¥ng b·ªã b·ªánh!';
        }
        break;
      case 'sell_animal':
        if (animal.growthProgress >= 100) {
          const sellPrice = Math.floor(animalData.price * 2 * (animal.health / 100));
          player.inventory.gold += sellPrice;
          player.animals.splice(index, 1);
          message = `‚úÖ ƒê√£ b√°n v·∫≠t nu√¥i v·ªõi gi√° ${sellPrice} v√†ng!`;
        } else {
          message = '‚ùå V·∫≠t nu√¥i ch∆∞a tr∆∞·ªüng th√†nh!';
        }
        break;
      default:
        return bot.answerCallbackQuery(query.id, '‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá!');
    }

    player.markModified('animals');
    await player.save();
    bot.answerCallbackQuery(query.id, message);
  });



  setInterval(async () => {
    const players = await Player.find({});
    const now = Date.now();

    for (const player of players) {
      for (const animal of player.animals) {
        const timeElapsed = (now - new Date(animal.lastChecked)) / 60000; // Th·ªùi gian ƒë√£ tr√¥i qua (ph√∫t)

        // TƒÉng tr∆∞·ªüng
        if (animal.growthProgress < 100) {
          const growthIncrease = (timeElapsed / (animalTypes[animal.type].growthTime / 60000)) * 100;
          animal.growthProgress = Math.min(100, animal.growthProgress + growthIncrease);
        }

        // ƒê√≥i
        if (animal.lastFed && now - new Date(animal.lastFed) > 3600000 + Math.random() * 3600000) {
          animal.health = Math.max(0, animal.health - timeElapsed * 0.5); // S·ª©c kh·ªèe gi·∫£m n·∫øu ƒë√≥i
        }

        // Kh√°t
        if (animal.lastWatered && now - new Date(animal.lastWatered) > 3600000 + Math.random() * 3600000) {
          animal.health = Math.max(0, animal.health - timeElapsed * 0.5); // S·ª©c kh·ªèe gi·∫£m n·∫øu kh√°t
        }

        // B·ªánh
        if (!animal.isSick && Math.random() < 0.02) {
          animal.isSick = true; // X√°c su·∫•t b·ªã b·ªánh
        }

        if (animal.isSick) {
          animal.health = Math.max(0, animal.health - timeElapsed * 0.8); // S·ª©c kh·ªèe gi·∫£m nhanh h∆°n khi b·ªánh
        }

        // C·∫≠p nh·∫≠t th·ªùi gian ki·ªÉm tra
        animal.lastChecked = now;
      }

      player.markModified('animals');
      await player.save();
    }
  }, 60000); // C·∫≠p nh·∫≠t m·ªói ph√∫t

  };

