module.exports = (bot) => {
  const Player = require('../models/Player');
  const plantTypes = require('../models/Plant');

  // H√†m t·∫°o s·ªë ng·∫´u nhi√™n trong kho·∫£ng [min, max]
  const randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

  setInterval(async () => {
    const players = await Player.find({});
    const now = new Date();

    for (const player of players) {
      const updatedPlants = player.plants.map((plant) => {
        const timeElapsed = (now - new Date(plant.lastChecked)) / 60000; // Th·ªùi gian tr√¥i qua (ph√∫t)

        // Tr·∫°ng th√°i c√¢y d·ª±a tr√™n n∆∞·ªõc v√† s√¢u b·ªánh
        const isHealthy = plant.waterLevel >= 70 && plant.pestLevel <= 25;
        const isModerate = (plant.waterLevel >= 50 && plant.waterLevel < 70) || (plant.pestLevel > 25 && plant.pestLevel <= 50);
        const isWeak = plant.waterLevel < 50 || plant.pestLevel > 50;

        // TƒÉng ho·∫∑c gi·∫£m s·ª©c s·ªëng d·ª±a tr√™n tr·∫°ng th√°i
        if (isHealthy) {
          plant.vitality = Math.min(100, plant.vitality + timeElapsed * 1.6);
        } else if (isModerate) {
          plant.vitality = Math.min(100, plant.vitality + timeElapsed * 0.8);
        } else if (isWeak) {
          const vitalityDecrease = timeElapsed * 0.5;
          plant.vitality = Math.max(0, plant.vitality - vitalityDecrease);
        }

        // Gi·∫£m n∆∞·ªõc v√† tƒÉng s√¢u b·ªánh theo th·ªùi gian
        const waterDecrease = timeElapsed * 0.5;
        plant.waterLevel = Math.max(0, plant.waterLevel - waterDecrease);

        const pestIncrease = randomInt(0.5, 1);
        plant.pestLevel = Math.min(100, plant.pestLevel + pestIncrease);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thu ho·∫°ch n·∫øu ti·∫øn tr√¨nh ƒë·∫°t 100%
        const progress = Math.min(100, (now - new Date(plant.plantedAt)) / plantTypes[plant.type].growthTime * 100);
        plant.progress = progress;

        if (progress >= 100 && plant.status !== 'ready') {
          plant.status = 'ready';
          bot.sendMessage(player.userId, `üåü C√¢y ${plantTypes[plant.type].name} ƒë√£ s·∫µn s√†ng ƒë·ªÉ thu ho·∫°ch!`);
        }

        plant.lastChecked = now; // C·∫≠p nh·∫≠t th·ªùi gian ki·ªÉm tra cu·ªëi c√πng
        return plant;
      });

      await Player.findByIdAndUpdate(player._id, { plants: updatedPlants });
    }
  }, 60000); // C·∫≠p nh·∫≠t m·ªói ph√∫t


  // H√†m t·∫°o thanh ti·∫øn tr√¨nh hi·ªÉn th·ªã tr·∫°ng th√°i c√¢y tr·ªìng
  const createProgressBar = (progress, water, vitality, pestCount, remainingTime) => {
    const filled = '‚ñà'; // Bi·ªÉu t∆∞·ª£ng ph·∫ßn ƒë√£ ho√†n th√†nh
    const empty = '‚ñí'; // Bi·ªÉu t∆∞·ª£ng ph·∫ßn ch∆∞a ho√†n th√†nh
    const barLength = 10; // ƒê·ªô d√†i c·ªßa thanh ti·∫øn tr√¨nh

    const progressFilled = Math.floor((progress / 100) * barLength); // S·ªë l∆∞·ª£ng kh·ªëi ƒë·∫ßy theo ti·∫øn tr√¨nh
    const waterFilled = Math.floor((water / 100) * barLength); // S·ªë l∆∞·ª£ng kh·ªëi ƒë·∫ßy theo m·ª©c n∆∞·ªõc
    const vitalityFilled = Math.floor((vitality / 100) * barLength); // S·ªë l∆∞·ª£ng kh·ªëi ƒë·∫ßy theo s·ª©c s·ªëng

    const timeDisplay = remainingTime > 0
      ? `C√≤n ‚è≥ ${(remainingTime / 60000).toFixed(1)} ph√∫t`
      : '‚ú® ƒê√£ c√≥ th·ªÉ thu ho·∫°ch!'; // Hi·ªÉn th·ªã th·ªùi gian c√≤n l·∫°i ho·∫∑c tr·∫°ng th√°i s·∫µn s√†ng

    return {
      growth: `${filled.repeat(progressFilled)}${empty.repeat(barLength - progressFilled)}`,
      water: `${filled.repeat(waterFilled)}${empty.repeat(barLength - waterFilled)}`,
      vitality: `${filled.repeat(vitalityFilled)}${empty.repeat(barLength - vitalityFilled)}`,
      pests: `üêõ S√¢u b·ªánh: ${Math.floor(pestCount)}%`,
      time: timeDisplay
    };
  };

  // X·ª≠ l√Ω l·ªánh tr·ªìng c√¢y
  bot.onText(/üå± Tr·ªìng c√¢y/, async (msg) => {
    const userId = msg.from.id;
    try {
      const player = await Player.findOne({ userId });
      const availableSeeds = Object.entries(player.inventory.seeds)
        .filter(([_, count]) => count > 0) // L·ªçc c√°c lo·∫°i h·∫°t gi·ªëng c√≥ s·ªë l∆∞·ª£ng > 0
        .map(([type, count]) => ({
          text: `${plantTypes[type].name} (${count})`, // Hi·ªÉn th·ªã t√™n v√† s·ªë l∆∞·ª£ng h·∫°t gi·ªëng
          callback_data: `plant_seed:${type}` // D·ªØ li·ªáu callback ƒë·ªÉ x·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i ch·ªçn
        }));

      if (availableSeeds.length === 0) {
        return bot.sendMessage(userId, '‚ùå B·∫°n kh√¥ng c√≥ h·∫°t gi·ªëng n√†o! H√£y mua th√™m t·∫°i c·ª≠a h√†ng üè™');
      }

      await bot.sendMessage(userId, 'üå± Ch·ªçn lo·∫°i h·∫°t gi·ªëng mu·ªën tr·ªìng:', {
        reply_markup: {
          inline_keyboard: availableSeeds.map(seed => [seed]) // Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn h·∫°t gi·ªëng
        }
      });
    } catch (err) {
      console.error('Plant seed error:', err);
      await bot.sendMessage(userId, '‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  });

  // Hi·ªÉn th·ªã tr·∫°ng th√°i c·ªßa c√°c c√¢y tr·ªìng
  bot.onText(/ChƒÉm s√≥c c√¢y tr·ªìng/, async (msg) => {
    const userId = msg.from.id;
    try {
       // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√¢y tr∆∞·ªõc khi hi·ªÉn th·ªã
      const player = await Player.findOne({ userId });

      if (player.plants.length === 0) {
        return bot.sendMessage(userId, '‚ùå B·∫°n ch∆∞a tr·ªìng c√¢y n√†o!');
      }

      for (const [index, plant] of player.plants.entries()) {
        const now = new Date();
        const timeRemaining = Math.max(0, plantTypes[plant.type].growthTime - (now - plant.plantedAt));
        const progressBar = createProgressBar(
          plant.progress,
          plant.waterLevel,
          plant.vitality,
          plant.pestLevel,
          timeRemaining
        );

        const imageUrls = plantTypes[plant.type].images; // L·∫•y danh s√°ch h√¨nh ·∫£nh t∆∞∆°ng ·ª©ng v·ªõi ti·∫øn tr√¨nh
        let currentImage = imageUrls[0];
        for (const [threshold, url] of Object.entries(imageUrls)) {
          if (plant.progress >= parseInt(threshold)) {
            currentImage = url; // Ch·ªçn h√¨nh ·∫£nh ph√π h·ª£p nh·∫•t v·ªõi ti·∫øn tr√¨nh hi·ªán t·∫°i
          }
        }

        await bot.sendPhoto(userId, currentImage, {
          caption: `üåø C√¢y ${index + 1} (${plantTypes[plant.type].name}):\n` +
            `üå± Ph√°t tri·ªÉn: ${progressBar.growth} ${plant.progress.toFixed(1)}%\n` +
            `üíß N∆∞·ªõc: ${progressBar.water} ${plant.waterLevel.toFixed(1)}%\n` +
            `‚ú® S·ª©c s·ªëng: ${progressBar.vitality} ${plant.vitality.toFixed(1)}%\n` +
            `${progressBar.pests}\n${progressBar.time}`,
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üíß T∆∞·ªõi n∆∞·ªõc', callback_data: `action:water:${index}` },
                { text: '‚ú® B√≥n ph√¢n', callback_data: `action:fertilize:${index}` },
                { text: 'üêõ Di·ªát s√¢u', callback_data: `action:pesticide:${index}` }
              ],
              ...(plant.status === 'ready' ? [[{ text: 'üåø Thu ho·∫°ch', callback_data: `harvest:${index}` }]] : [])
            ]
          }
        });
      }
    } catch (err) {
      console.error('Show plant status error:', err);
      await bot.sendMessage(userId, '‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  });

  // X·ª≠ l√Ω c√°c h√†nh ƒë·ªông t∆∞∆°ng t√°c v·ªõi c√¢y tr·ªìng
  bot.on('callback_query', async (query) => {
    const userId = query.from.id;
    const data = query.data;

    if (data.startsWith('plant_seed:')) {
        const seedType = data.split(':')[1];
        const player = await Player.findOne({ userId });

        if (player.plants.length >= player.landSlots) {
            return bot.answerCallbackQuery(query.id, { text: '‚ùå B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt s·ªë √¥ ƒë·∫•t! H√£y mua th√™m t·∫°i c·ª≠a h√†ng.' });

        }

        if (player.inventory.seeds[seedType] <= 0) {
            return bot.answerCallbackQuery(query.id, { text:'‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß h·∫°t gi·ªëng!'});
        }

        player.inventory.seeds[seedType]--;
        player.plants.push({
            type: seedType,
            status: 'growing',
            progress: 0,
            waterLevel: 100,
            vitality: 100,
            pestLevel: 0,
            plantedAt: new Date(),
            lastChecked: new Date()
        });

        await player.save();
        bot.answerCallbackQuery(query.id, { text: '‚úÖ Gieo h·∫°t th√†nh c√¥ng!'});
    } else if (data.startsWith('action:')) {
      const [action, plantIndex] = data.split(':').slice(1);
      const player = await Player.findOne({ userId });
      const plant = player.plants[plantIndex];

      if (!plant) {
        return bot.answerCallbackQuery(query.id, '‚ùå C√¢y kh√¥ng t·ªìn t·∫°i!');
      }

      let message = '';
      // X·ª≠ l√Ω c√°c h√†nh ƒë·ªông c·ª• th·ªÉ
      switch (action) {
        case 'water':
          if (plant.waterLevel < 100) {
            plant.waterLevel = Math.min(100, plant.waterLevel + 20); // T∆∞·ªõi n∆∞·ªõc, t·ªëi ƒëa 100%
            message = 'üíß C√¢y ƒë√£ ƒë∆∞·ª£c t∆∞·ªõi n∆∞·ªõc!';
          } else {
            return bot.answerCallbackQuery(query.id, { text:'‚ùå C√¢y ƒë√£ ƒë·ªß n∆∞·ªõc!'});
          }
          break;
        case 'fertilize':
          player.inventory.fertilizer = player.inventory.fertilizer || 0;
          if (player.inventory.fertilizer > 0) {
            plant.vitality = Math.min(100, plant.vitality + 10); // B√≥n ph√¢n, tƒÉng s·ª©c s·ªëng
            player.inventory.fertilizer--;
            message = '‚ú® C√¢y ƒë√£ ƒë∆∞·ª£c b√≥n ph√¢n!';
          } else {
            return bot.answerCallbackQuery(query.id, { text:'‚ùå Kh√¥ng c√≤n ph√¢n b√≥n!'});
          }
          break;
        case 'pesticide':
          player.inventory.pesticide = player.inventory.pesticide || 0;
          if (player.inventory.pesticide > 0 && plant.pestLevel > 0) {
            plant.pestLevel = Math.max(0, plant.pestLevel - 5); // Di·ªát s√¢u b·ªánh, gi·∫£m m·ª©c s√¢u b·ªánh
            player.inventory.pesticide--;
            message = 'üêõ S√¢u b·ªánh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!';
          } else {
            return bot.answerCallbackQuery(query.id, { text:'‚ùå Kh√¥ng c√≥ s√¢u b·ªánh ƒë·ªÉ x·ª≠ l√Ω ho·∫∑c h·∫øt thu·ªëc!'});
          }
          break;
        default:
          return bot.answerCallbackQuery(query.id, '‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá!');
      }

      player.markModified('plants');
      await player.save();

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√¢y ngay l·∫≠p t·ª©c
      const now = new Date();
      const timeRemaining = Math.max(0, plantTypes[plant.type].growthTime - (now - plant.plantedAt));
      const progressBar = createProgressBar(
        plant.progress,
        plant.waterLevel,
        plant.vitality,
        plant.pestLevel,
        timeRemaining
      );

      const imageUrls = plantTypes[plant.type].images;
      let currentImage = imageUrls[0];
      for (const [threshold, url] of Object.entries(imageUrls)) {
        if (plant.progress >= parseInt(threshold)) {
          currentImage = url;
        }
      }

      const newCaption = `üåø C√¢y ${parseInt(plantIndex) + 1} (${plantTypes[plant.type].name}):\n` +
        `üå± Ph√°t tri·ªÉn: ${progressBar.growth} ${plant.progress.toFixed(1)}%\n` +
        `üíß N∆∞·ªõc: ${progressBar.water} ${plant.waterLevel.toFixed(1)}%\n` +
        `‚ú® S·ª©c s·ªëng: ${progressBar.vitality} ${plant.vitality.toFixed(1)}%\n` +
        `${progressBar.pests}\n${progressBar.time}`;

      bot.editMessageMedia(
        {
          type: 'photo',
          media: currentImage,
          caption: newCaption
        },
        {
          chat_id: query.message.chat.id,
          message_id: query.message.message_id,
        }
      ).catch((err) => {
        if (err.response && err.response.body && err.response.body.description.includes('message is not modified')) {
          console.log('Message content is identical; no update made.');
        } else {
          console.error('Error updating message:', err);
        }
      });

      bot.editMessageReplyMarkup(
        {
          inline_keyboard: [
            [
              { text: 'üíß T∆∞·ªõi n∆∞·ªõc', callback_data: `action:water:${plantIndex}` },
              { text: '‚ú® B√≥n ph√¢n', callback_data: `action:fertilize:${plantIndex}` },
              { text: 'üêõ Di·ªát s√¢u', callback_data: `action:pesticide:${plantIndex}` }
            ],
            ...(plant.status === 'ready' ? [[{ text: 'üåø Thu ho·∫°ch', callback_data: `harvest:${plantIndex}` }]] : [])
          ]
        },
        {
          chat_id: query.message.chat.id,
          message_id: query.message.message_id,
        }
      ).catch((err) => {
        if (err.response && err.response.body && err.response.body.description.includes('message is not modified')) {
          console.log('Reply markup is identical; no update made.');
        } else {
          console.error('Error updating reply markup:', err);
        }
      });

      bot.answerCallbackQuery(query.id, `‚úÖ ${message}`);
    } else if (data.startsWith('harvest:')) {
      const plantIndex = parseInt(data.split(':')[1]);
      const player = await Player.findOne({ userId });
      const plant = player.plants[plantIndex];

      if (!plant) {
        return bot.answerCallbackQuery(query.id, '‚ùå C√¢y kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c thu ho·∫°ch!');
      }

      if (plant.status !== 'ready') {
        return bot.answerCallbackQuery(query.id, '‚ùå C√¢y ch∆∞a s·∫µn s√†ng ƒë·ªÉ thu ho·∫°ch!');
      }

      const vitalityFactor = (plant.vitality || 0) / 100; // H·ªá s·ªë d·ª±a tr√™n s·ª©c s·ªëng
      const reward = Math.floor(plantTypes[plant.type].sellPrice * vitalityFactor); // T√≠nh ph·∫ßn th∆∞·ªüng thu ho·∫°ch
      player.inventory.gold += reward; // C·ªông v√†ng v√†o kho ng∆∞·ªùi ch∆°i
      player.plants.splice(plantIndex, 1); // X√≥a c√¢y kh·ªèi danh s√°ch
      await player.save();

      bot.answerCallbackQuery(query.id, `‚úÖ Thu ho·∫°ch th√†nh c√¥ng! B·∫°n nh·∫≠n ƒë∆∞·ª£c ${reward} v√†ng.`);
      bot.deleteMessage(query.message.chat.id, query.message.message_id); // X√≥a tin nh·∫Øn li√™n quan ƒë·∫øn c√¢y
    }
  });

  bot.onText(/\/üìä Kho c·ªßa t√¥i/, async (msg) => {
    const userId = msg.from.id;
    try {
      const player = await Player.findOne({ userId });

      if (!player) {
        return bot.sendMessage(userId, '_‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i!_', { parse_mode: 'Markdown' });
      }

      // Chu·∫©n b·ªã d·ªØ li·ªáu hi·ªÉn th·ªã
      const { inventory, plants, animals, barns, landSlots } = player;
      const plantDescriptions = plants.map((plant, index) => {
        return `*C√¢y ${index + 1}*: Lo·∫°i: _${plant.type}_ | Tr·∫°ng th√°i: _${plant.status}_ | Ph√°t tri·ªÉn: _${plant.progress.toFixed(1)}%_ | S·ª©c s·ªëng: _${plant.vitality.toFixed(1)}%_`;
      }).join('\n');

      const animalDescriptions = animals.map((animal, index) => {
        return `*V·∫≠t nu√¥i ${index + 1}*: Lo·∫°i: _${animal.type}_ | Tr·∫°ng th√°i: _${animal.status}_ | Ph√°t tri·ªÉn: _${animal.growthProgress.toFixed(1)}%_ | S·ª©c kh·ªèe: _${animal.health.toFixed(1)}%_`;
      }).join('\n');

      const inventoryDescription = `\n*V·∫≠t ph·∫©m trong kho*: \nüí∞ *V√†ng*: _${inventory.gold}_\nüå± *H·∫°t gi·ªëng*: ${Object.entries(inventory.seeds).map(([type, count]) => `_${type}_: ${count}`).join(', ')}\n‚ú® *Ph√¢n b√≥n*: _${inventory.fertilizer}_\nüêõ *Thu·ªëc tr·ª´ s√¢u*: _${inventory.pesticide}_\nüçó *Th·ª©c ƒÉn v·∫≠t nu√¥i*: _${inventory.animalFood}_\nüíä *Thu·ªëc*: _${inventory.medicine}_`;

      const extraInfo = `\n\n*Th√¥ng tin kh√°c*: \nüåæ *√î ƒë·∫•t*: _${landSlots}_\nüè† *Chu·ªìng tr·∫°i*: _${barns}_`;

      const fullDescription = `*üéí T√†i s·∫£n c·ªßa b·∫°n:*\n\n${plantDescriptions || '_Kh√¥ng c√≥ c√¢y n√†o ƒë∆∞·ª£c tr·ªìng._'}\n\n${animalDescriptions || '_Kh√¥ng c√≥ v·∫≠t nu√¥i n√†o._'}${inventoryDescription}${extraInfo}`;

      // G·ª≠i ·∫£nh minh h·ªça k√®m th√¥ng tin t√†i s·∫£n
      const assetImageUrl = 'https://img.upanh.tv/2025/01/17/DALLE-2025-01-17-11.43.01---A-2D-game-interface-for-the-feature-Tai-san-ca-toi-My-Assets-in-a-Vietnamese-farm-game.-The-interface-is-playful-cute-and-uniquely-creative.-Th.png'; // Thay th·∫ø b·∫±ng URL h√¨nh ·∫£nh c·ªßa b·∫°n
      await bot.sendPhoto(userId, assetImageUrl, {
        caption: fullDescription,
        parse_mode: 'Markdown',
      });
    } catch (err) {
      console.error('Error displaying assets:', err);
      bot.sendMessage(userId, '_‚ùå C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã t√†i s·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau._', { parse_mode: 'Markdown' });
    }
  });
};
